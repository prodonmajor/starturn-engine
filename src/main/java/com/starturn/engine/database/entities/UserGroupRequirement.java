package com.starturn.engine.database.entities;
// Generated 01-Mar-2020 08:29:01 by Hibernate Tools 4.3.1


import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.GeneratedValue;
import static javax.persistence.GenerationType.IDENTITY;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.Table;
import javax.persistence.Version;

/**
 * UserGroupRequirement generated by hbm2java
 */
@Entity
@Table(name="USER_GROUP_REQUIREMENT"
    ,catalog="starturn"
)
public class UserGroupRequirement  implements java.io.Serializable {


     private Integer id;
     private Long version;
     private Requirement requirement;
     private UserGroup userGroup;

    public UserGroupRequirement() {
    }

	
    public UserGroupRequirement(Requirement requirement) {
        this.requirement = requirement;
    }
    public UserGroupRequirement(Requirement requirement, UserGroup userGroup) {
       this.requirement = requirement;
       this.userGroup = userGroup;
    }
   
     @Id @GeneratedValue(strategy=IDENTITY)

    
    @Column(name="id", unique=true, nullable=false)
    public Integer getId() {
        return this.id;
    }
    
    public void setId(Integer id) {
        this.id = id;
    }

    @Version
    @Column(name="version")
    public Long getVersion() {
        return this.version;
    }
    
    public void setVersion(Long version) {
        this.version = version;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="requirement_id", nullable=false)
    public Requirement getRequirement() {
        return this.requirement;
    }
    
    public void setRequirement(Requirement requirement) {
        this.requirement = requirement;
    }

@ManyToOne(fetch=FetchType.LAZY)
    @JoinColumn(name="user_group_id")
    public UserGroup getUserGroup() {
        return this.userGroup;
    }
    
    public void setUserGroup(UserGroup userGroup) {
        this.userGroup = userGroup;
    }




}


